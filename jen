pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = credentials('Github')
        PLAN_FILE = "terraform-plan.out"
    }

    parameters {
        string(name: 'AWS_ACCESS_KEY_ID', defaultValue: '', description: 'Enter AWS Access Key ID')
        password(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'Enter AWS Secret Access Key')
        string(name: 'PLAN_BRANCH', defaultValue: 'terraform-plan-branch', description: 'Branch where the Terraform plan is stored')
    }

    stages {
        

        stage('Force Release Dependency Lock') {
            steps {
                withEnv([
                    "AWS_ACCESS_KEY_ID=${params.AWS_ACCESS_KEY_ID}",
                    "AWS_SECRET_ACCESS_KEY=${params.AWS_SECRET_ACCESS_KEY}"
                ]) {
                    sh """
                    terraform init -upgrade
                    terraform providers lock -force
                    """
                }
            }
        }

        stage('Checkout Plan Branch') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Github', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                    git branch: "${params.PLAN_BRANCH}", url: 'https://github.com/nidhi-ashtikar/infra-tf-creation.git'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withEnv([
                    "AWS_ACCESS_KEY_ID=${params.AWS_ACCESS_KEY_ID}",
                    "AWS_SECRET_ACCESS_KEY=${params.AWS_SECRET_ACCESS_KEY}"
                ]) {
                    sh """
                    terraform apply -auto-approve ${env.PLAN_FILE}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
