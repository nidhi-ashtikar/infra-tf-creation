@Library ("Jenkins-shared-library")_

pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = credentials('Github')
        GIT_USER_NAME = "nidhi-ashtikar"
        GIT_USER_EMAIL = "ashtikarnidhi19@gmail.com"
        PLAN_FILE = "terraform-plan.out"
        PLAN_OUTPUT_FILE = "terraform-plan.txt"
    }

    parameters {
        string(name: 'AWS_ACCESS_KEY_ID', defaultValue: '', description: 'Enter AWS Access Key ID')
        password(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'Enter AWS Secret Access Key')
        string(name: 'instance_name', defaultValue: 'my-instance', description: 'EC2 Instance Name')
        string(name: 'instance_type', defaultValue: 't2.micro', description: 'EC2 Instance Type')
        choice(choices: ['us-east-2', 'us-east-1', 'us-west-1'], description: 'Select in which region you want to deploy the resource', name: 'region')
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/nidhi-ashtikar/infra-tf-creation.git'
            }
        }

        stage('Terraform Init') {
            steps {
                script{
                    Terraform-Init()
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withEnv([
                    "AWS_ACCESS_KEY_ID=${params.AWS_ACCESS_KEY_ID}",
                    "AWS_SECRET_ACCESS_KEY=${params.AWS_SECRET_ACCESS_KEY}"
                ]) {
                    sh """
                    terraform plan -out=${env.PLAN_FILE} \
                    -var 'region=${params.region}' \
                    -var 'instance_name=${params.instance_name}' \
                    -var 'instance_type=${params.instance_type}' | tee ${env.PLAN_OUTPUT_FILE}
                    """
                }
            }
        }

        stage('Create New Branch') {
            steps {
                script {
                    def branchName = "${params.instance_name}-terraform-plan-branch"
                    sh """
                    git config user.name "${env.GIT_USER_NAME}"
                    git config user.email "${env.GIT_USER_EMAIL}"
                    git checkout -b ${branchName} || echo "Branch ${branchName} already exists, skipping branch creation."
                    """
                }
            }
        }

        stage('Store Plan and Commit') {
            steps {
                script {
                    if (fileExists(env.PLAN_OUTPUT_FILE)) {
                        sh """
                        git add ${env.PLAN_FILE} ${env.PLAN_OUTPUT_FILE}
                        git commit -m "Add Terraform plan output"
                        """
                    } else {
                        error "Terraform plan output file not found!"
                    }
                }
            }
        }

        stage('Push Branch to GitHub') {
            steps {
                script {
                    def branchName = "${params.instance_name}-terraform-plan-branch"
                    withCredentials([usernamePassword(credentialsId: 'Github', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                        sh """
                        git push https://\${GITHUB_USER}:\${GITHUB_TOKEN}@github.com/nidhi-ashtikar/infra-tf-creation.git ${branchName}
                        """
                    }
                }
            }
        }

        stage('Post Plan to PR') {
            steps {
                script {
                    def branchName = "${params.instance_name}-terraform-plan-branch"
                    withCredentials([usernamePassword(credentialsId: 'Github', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                        sh """
                        gh pr create --repo https://github.com/nidhi-ashtikar/infra-tf-creation.git --head ${branchName} --title "Terraform Plan" --body "\$(cat ${env.PLAN_OUTPUT_FILE})"
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
